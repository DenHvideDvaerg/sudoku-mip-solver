name: CI

# Define the Python version for coverage reporting at the workflow level
env:
  COVERAGE_PYTHON_VERSION: '3.12'

on:
  push:
    paths:
      - '**.py'  # Run on any Python file changes
      - 'requirements.txt'  # Run when requirements change
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    # Add permissions needed for PR comments
    permissions:
      contents: read
      pull-requests: write
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest pytest-cov coverage
        pip install -r requirements.txt
        
    - name: Test with pytest
      run: |
        pytest --cov=sudoku_mip_solver --cov-report=term --cov-report=xml --cov-report=html
        
    # Only run coverage reporting steps for the specified Python version
    - name: Check coverage Python version
      id: check_version
      run: |
        if [[ "${{ matrix.python-version }}" == "${{ env.COVERAGE_PYTHON_VERSION }}" ]]; then
          echo "is_coverage_version=true" >> $GITHUB_OUTPUT
        else
          echo "is_coverage_version=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Archive HTML coverage results
      uses: actions/upload-artifact@v4
      if: steps.check_version.outputs.is_coverage_version == 'true'
      with:
        name: code-coverage-html
        path: htmlcov/
        retention-days: 14
        
    - name: Code Coverage Summary
      uses: irongut/CodeCoverageSummary@v1.3.0
      if: steps.check_version.outputs.is_coverage_version == 'true'
      with:
        filename: coverage.xml
        badge: true
        format: markdown
        indicators: true
        output: both
        thresholds: '60 80'
        
    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: steps.check_version.outputs.is_coverage_version == 'true' && github.event_name == 'pull_request'
      with:
        recreate: true
        path: code-coverage-results.md
        GITHUB_TOKEN: ${{ github.token }}
        
    - name: Write to Job Summary
      if: steps.check_version.outputs.is_coverage_version == 'true'
      run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY
